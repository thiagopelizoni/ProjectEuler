# Problem: https://projecteuler.net/problem=321
from typing import List

def generate_sequence(start1: int, start2: int, max_terms: int = 30) -> List[int]:
    seq = [start1, start2]
    while len(seq) < max_terms:
        next_val = 6 * seq[-1] - seq[-2]
        seq.append(next_val)
    return seq

def main():
    """
    Purpose:
    Solves Project Euler problem 321 by finding the sum of the first 40 terms in the sequence of n where M(n) = n(n+2) is a triangular number.

    Method / Math Rationale:
    M(n) = n^2 + 2n = n(n+2). We need n such that n(n+2) = k(k+1)/2 for some integer k.
    This leads to solving m^2 - 8(l)^2 = -7 where l = n+1.
    Solutions come from two chains generated by the recurrence derived from the Pell equation x^2 - 8y^2 = 1.
    Generate l sequences for both chains, compute n = l - 1 (n >= 1), merge and sort, sum first 40.

    Complexity:
    O(1) since fixed number of terms.

    References:
    https://projecteuler.net/problem=321
    """
    ls_chain1 = generate_sequence(1, 4)
    ls_chain2 = generate_sequence(2, 11)
    all_ns = sorted([l - 1 for l in ls_chain1 + ls_chain2 if l - 1 >= 1])
    sum_first_40 = sum(all_ns[:40])
    print(sum_first_40)

if __name__ == "__main__":
    main()